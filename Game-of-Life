import pygame
import numpy as np

screen_width = 1040 #ширина экрана
screen_height = 840 #длина экрана

# Определение цветов
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREY = (50, 50, 50)

# Установка длины и ширины каждого местоположения сетки
WIDTH = 10
HEIGHT = 10

# Установка вншнего отступа 
MARGIN = 2
#Определение количества строк и столбцов
rows = screen_height//(HEIGHT+MARGIN)
cols = screen_width//(WIDTH+MARGIN)
print(rows,cols)

#Создаем нулевую матрицу
grid = np.zeros((cols,rows))


def board_evolve():
    
    new_grid = grid.copy()
#Определяем соседей
    for x in range(0, cols):
        for y in range(0, rows):
            state = grid[x,y]
            neighbors = (grid[x,(y-1)%rows] + grid[x,(y+1)%rows] +
                        grid[(x-1)%cols,y] + grid[(x+1)%cols,y] +
                        grid[(x-1)%cols,(y-1)%rows] + grid[(x+1)%cols,(y-1)%rows] +
                         grid[(x-1)%cols, (y+1)%rows] + grid[(x+1)%cols,(y+1)%rows])
            
            #Правила игры
            if state == 0 and neighbors == 3: #клетка мертвая и имеет три соседа
                    new_grid[x,y] = 1
            elif state == 1 and (neighbors < 2): #клетка живая и имеет менее двух соседей
                new_grid[x,y] = 0
            elif state == 1 and (neighbors > 3): #клетка живая и имеет более трех соседей
                new_grid[x,y] = 0
            else:
                new_grid[x,y] = state
    return new_grid


# Initialize pygame
pygame.init()
 
# Установка высоты и ширины экрана
WINDOW_SIZE = [screen_width, screen_height]
screen = pygame.display.set_mode(WINDOW_SIZE)
 
# Название игры
pygame.display.set_caption("Game of Life")
 
# Цикл, пока пользователь не нажмет кнопку закрытия
done = False
running = False
# Управление скоростью обновления экрана
clock = pygame.time.Clock()

# -------- Основной цикл программы -----------
while not done:
    # Обработка событий
    for event in pygame.event.get():  # Пользователь что-то делает
        if event.type == pygame.QUIT:  # Если пользователь нажимает закрыть
            done = True  
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
          
            if running == True:
                running = False
            else:
                running = True
        elif event.type == pygame.KEYDOWN and event.key == pygame.K_r:
          
            grid = np.zeros((cols, rows))
            running = False
            

    if  pygame.mouse.get_pressed()[0]:
            pos = pygame.mouse.get_pos()
            column = pos[0] // (WIDTH + MARGIN)
            row = pos[1] // (HEIGHT + MARGIN)
            grid[column,row] = 1
    if pygame.mouse.get_pressed()[2]:
            pos = pygame.mouse.get_pos()
            column = pos[0] // (WIDTH + MARGIN)
            row = pos[1] // (HEIGHT + MARGIN)
            grid[column,row] = 0
 
     # Установка фона экрана
    screen.fill(GREY)
 
    # Нарисовать сетку
    for row in range(rows):
        for column in range(cols):
            color = BLACK
            if grid[column,row] == 1:
                color = WHITE
            pygame.draw.rect(screen,
                             color,
                             [(MARGIN + WIDTH) * column + MARGIN,
                              (MARGIN + HEIGHT) * row + MARGIN,
                              WIDTH,
                              HEIGHT])
 
    #Обновление эволюции
    if running:
        grid = board_evolve()

    #Ограничение до 20 кадров в сек., чтобы увидеть эволюцию
    clock.tick(20)
    
    pygame.display.flip()
 
pygame.quit()
